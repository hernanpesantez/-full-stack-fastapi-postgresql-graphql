# # Starter pipeline
# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml


# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'
# steps:

# - task: DownloadSecureFile@1
#   name: mySecureFile # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
#   inputs:
#     secureFile: '.env'
#     #retryCount: 5 # Optional

# - script: |
#     sudo cat $(mySecureFile.secureFilePath)

# - task: DockerCompose@0
#   displayName: Combine configuration
#   inputs:
#     action: Combine configuration
#     dockerComposeFile: docker-compose.yml
#     additionalDockerComposeFiles: docker-compose.override.yml
#     projectName: $(Build.Repository.Name)
    
    

trigger:
- master

resources:
- master

variables:
  azureSubscription: a2d66221-cfb0-4024-b856-b74e60ffbaa8
  azureContainerRegistryEndPoint: testfastapi.azurecr.io


# Agent should be non micorosft
vmImageName: ubuntu-latest

steps:
- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: '$(Parameters.RestoreBuildProjects)'


- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    projects: '$(Parameters.RestoreBuildProjects)'
    arguments: '--configuration $(BuildConfiguration)'


- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: '$(Parameters.TestProjects)'
    arguments: '--configuration $(BuildConfiguration)'


- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
    zipAfterPublish: True


- task: DockerCompose@0
  displayName: 'Docker Compose command'
  inputs:
    azureSubscription: '$(azureSubscription)'
    azureContainerRegistry: '$(azureContainerRegistryEndPoint)'
    dockerComposeFile: 'full-stack-fastapi-postgresql-graphql/docker-compose.yml'
    dockerComposeCommand: '--no-ansi   build '
    arguments: '--no-ansi   build '


- task: DockerCompose@0
  displayName: 'Push service images command'
  inputs:
    azureSubscription: '$(azureSubscription)'
    azureContainerRegistry: '$(azureContainerRegistryEndPoint)'
    dockerComposeFile: 'full-stack-fastapi-postgresql-graphql/docker-compose.yml'
    action: 'Push services'
   
    includeLatestTag: true