# # Starter pipeline
trigger:
- master


variables:
  azureSubscription: xyz devops
  azureContainerRegistryEndPoint: testfastapi.azurecr.io


# Agent should be non micorosft
pool:
  vmImageName: ubuntu-latest

steps:
  
- task: DockerCompose@0
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Visual Studio Professional Subscription(a2d66221-cfb0-4024-b856-b74e60ffbaa8)'
    azureContainerRegistry: '{"loginServer":"testfastapi.azurecr.io", "id" : "/subscriptions/a2d66221-cfb0-4024-b856-b74e60ffbaa8/resourceGroups/Test-fastAPI/providers/Microsoft.ContainerRegistry/registries/TestFastAPI"}'
    dockerComposeFile: '**/docker-compose.yml'
    additionalDockerComposeFiles: '**/docker-compose.override.yml'
    dockerComposeFileArgs: |
      DOMAIN=localhost
      # DOMAIN=local.dockertoolbox.tiangolo.com
      # DOMAIN=localhost.tiangolo.com
      # DOMAIN=dev.hernan.io
      
      STACK_NAME=hernan-io
      
      TRAEFIK_PUBLIC_NETWORK=traefik-public
      TRAEFIK_TAG=hernan.io
      TRAEFIK_PUBLIC_TAG=traefik-public
      
      DOCKER_IMAGE_BACKEND=backend
      DOCKER_IMAGE_CELERYWORKER=celeryworker
      DOCKER_IMAGE_FRONTEND=frontend
      
      # Backend
      BACKEND_CORS_ORIGINS=["http://localhost", "http://localhost:4200", "http://localhost:3000", "http://localhost:8080", "https://localhost", "https://localhost:4200", "https://localhost:3000", "https://localhost:8080", "http://dev.hernan.io", "https://dev.hernan.io", "https://hernan.io", "http://local.dockertoolbox.tiangolo.com", "http://localhost.tiangolo.com"]
      PROJECT_NAME=porfolio
      SECRET_KEY=0091a006b40e554ab17a5b5a3ce31ff12baf944484ac56de8582b0b172fd65bb
      FIRST_SUPERUSER=admin@hernan.io
      FIRST_SUPERUSER_PASSWORD=Mate1822
      SMTP_TLS=True
      SMTP_PORT=587
      SMTP_HOST=
      SMTP_USER=
      SMTP_PASSWORD=
      EMAILS_FROM_EMAIL=info@hernan.io
      
      USERS_OPEN_REGISTRATION=False
      
      SENTRY_DSN=
      
      # Flower
      FLOWER_BASIC_AUTH=admin:Mate1822
      
      # Postgres
      POSTGRES_SERVER=db
      POSTGRES_USER=postgres
      POSTGRES_PASSWORD=Mate1822
      POSTGRES_DB=app
      
      # PgAdmin
      PGADMIN_LISTEN_PORT=5050
      PGADMIN_DEFAULT_EMAIL=admin@hernan.io
      PGADMIN_DEFAULT_PASSWORD=Mate1822
    action: 'Build services'
# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml


# trigger:
# - main

# pool:
#   vmImage: 'ubuntu-latest'
# steps:

# - task: DownloadSecureFile@1
#   name: mySecureFile # The name with which to reference the secure file's path on the agent, like $(mySecureFile.secureFilePath)
#   inputs:
#     secureFile: '.env'
#     #retryCount: 5 # Optional

# - script: |
#     sudo cat $(mySecureFile.secureFilePath)

# - task: DockerCompose@0
#   displayName: Combine configuration
#   inputs:
#     action: Combine configuration
#     dockerComposeFile: docker-compose.yml
#     additionalDockerComposeFiles: docker-compose.override.yml
#     projectName: $(Build.Repository.Name)
    
    

# trigger:
# - master


# variables:
#   azureSubscription: xyz devops
#   azureContainerRegistryEndPoint: testfastapi.azurecr.io


# # Agent should be non micorosft
# pool:
#   vmImageName: ubuntu-latest

# steps:
# - task: DotNetCoreCLI@2
#   displayName: Restore
#   inputs:
#     command: restore
#     projects: '$(Parameters.RestoreBuildProjects)'


# - task: DotNetCoreCLI@2
#   displayName: Build
#   inputs:
#     projects: '$(Parameters.RestoreBuildProjects)'
#     arguments: '--configuration $(BuildConfiguration)'


# - task: DotNetCoreCLI@2
#   displayName: Test
#   inputs:
#     command: test
#     projects: '$(Parameters.TestProjects)'
#     arguments: '--configuration $(BuildConfiguration)'


# - task: DotNetCoreCLI@2
#   displayName: Publish
#   inputs:
#     command: publish
#     publishWebProjects: True
#     arguments: '--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)'
#     zipAfterPublish: True


# - task: DockerCompose@0
#   displayName: 'Docker Compose command'
#   inputs:
#     azureSubscription: '$(azureSubscription)'
#     azureContainerRegistry: '$(azureContainerRegistryEndPoint)'
#     dockerComposeFile: 'full-stack-fastapi-postgresql-graphql/docker-compose.yml'
#     dockerComposeCommand: '--no-ansi   build '
#     arguments: '--no-ansi   build '


# - task: DockerCompose@0
#   displayName: 'Push service images command'
#   inputs:
#     azureSubscription: '$(azureSubscription)'
#     azureContainerRegistry: '$(azureContainerRegistryEndPoint)'
#     dockerComposeFile: 'full-stack-fastapi-postgresql-graphql/docker-compose.yml'
#     action: 'Push services'
   
#     includeLatestTag: true